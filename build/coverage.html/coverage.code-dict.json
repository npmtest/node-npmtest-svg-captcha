{"/home/travis/build/npmtest/node-npmtest-svg-captcha/test.js":"/* istanbul instrument in package npmtest_svg_captcha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-svg-captcha/lib.npmtest_svg_captcha.js":"/* istanbul instrument in package npmtest_svg_captcha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_svg_captcha = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_svg_captcha = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-svg-captcha/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-svg-captcha && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_svg_captcha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_svg_captcha\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_svg_captcha.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_svg_captcha.rollup.js'] =\n            local.assetsDict['/assets.npmtest_svg_captcha.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_svg_captcha.__dirname + '/lib.npmtest_svg_captcha.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-svg-captcha/node_modules/svg-captcha/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-svg-captcha/node_modules/svg-captcha/lib/index.js":"'use strict';\nconst chToPath = require('./ch-to-path');\nconst random = require('./random');\nconst optionMngr = require('./option-manager');\n\nconst opts = optionMngr.options;\n\nconst getLineNoise = function (width, height, options) {\n\tconst hasColor = options.color;\n\tconst noiseLines = [];\n\tconst min = options.inverse ? 7 : 1;\n\tconst max = options.inverse ? 15 : 9;\n\tlet i = -1;\n\n\twhile (++i < options.noise) {\n\t\tconst start = `${random.int(1, 21)} ${random.int(1, height - 1)}`;\n\t\tconst end = `${random.int(width - 21, width - 1)} ${random.int(1, height - 1)}`;\n\t\tconst mid1 = `${random.int((width / 2) - 21, (width / 2) + 21)} ${random.int(1, height - 1)}`;\n\t\tconst mid2 = `${random.int((width / 2) - 21, (width / 2) + 21)} ${random.int(1, height - 1)}`;\n\t\tconst color = hasColor ? random.color() : random.greyColor(min, max);\n\t\tnoiseLines.push(`<path d=\"M${start} C${mid1},${mid2},${end}\" stroke=\"${color}\" fill=\"none\"/>`);\n\t}\n\n\treturn noiseLines;\n};\n\nconst getText = function (text, width, height, options) {\n\tconst len = text.length;\n\tconst spacing = (width - 2) / (len + 1);\n\tconst min = options.inverse ? 10 : 0;\n\tconst max = options.inverse ? 14 : 4;\n\tlet i = -1;\n\tconst out = [];\n\n\twhile (++i < len) {\n\t\tconst x = spacing * (i + 1);\n\t\tconst y = height / 2;\n\t\tconst charPath = chToPath(text[i], Object.assign({x, y}, options));\n\n\t\tconst color = options.color ?\n\t\t\trandom.color(options.background) : random.greyColor(min, max);\n\t\tout.push(`<path fill=\"${color}\" d=\"${charPath}\"/>`);\n\t}\n\n\treturn out;\n};\n\nconst createCaptcha = function (text, options) {\n\ttext = text || random.captchaText();\n\toptions = Object.assign({}, opts, options);\n\tconst width = options.width;\n\tconst height = options.height;\n\tconst bg = options.background;\n\tif (bg) {\n\t\toptions.color = true;\n\t}\n\n\tconst bgRect = bg ?\n\t\t`<rect width=\"100%\" height=\"100%\" fill=\"${bg}\"/>` : '';\n\tconst paths =\n\t\t[].concat(getLineNoise(width, height, options))\n\t\t\t.concat(getText(text, width, height, options))\n\t\t\t.sort(() => Math.random() - 0.5)\n\t\t\t.join('');\n\tconst start = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\">`;\n\tconst xml = `${start}${bgRect}${paths}</svg>`;\n\n\treturn xml;\n};\n\nconst create = function (options) {\n\tconst text = random.captchaText(options);\n\tconst data = createCaptcha(text, options);\n\n\treturn {text, data};\n};\n\nconst createMathExpr = function (options) {\n\tconst expr = random.mathExpr();\n\tconst text = expr.text;\n\tconst data = createCaptcha(expr.equation, options);\n\n\treturn {text, data};\n};\n\nmodule.exports = createCaptcha;\nmodule.exports.randomText = random.captchaText;\nmodule.exports.create = create;\nmodule.exports.createMathExpr = createMathExpr;\nmodule.exports.options = opts;\nmodule.exports.loadFont = optionMngr.loadFont;\n","/home/travis/build/npmtest/node-npmtest-svg-captcha/node_modules/svg-captcha/lib/ch-to-path.js":"'use strict';\nconst assert = require('assert');\n\nmodule.exports = function (text, opts) {\n\tconst ch = text[0];\n\tassert(ch, 'expect a string');\n\n\tconst fontSize = opts.fontSize;\n\tconst fontScale = fontSize / opts.font.unitsPerEm;\n\n\tconst glyph = opts.font.charToGlyph(ch);\n\tconst width = glyph.advanceWidth ? glyph.advanceWidth * fontScale : 0;\n\tconst left = opts.x - (width / 2);\n\n\tconst top = opts.y - opts.descender * fontScale;\n\tconst path = glyph.getPath(left, top, fontSize);\n\n\tconst pathData = path.toPathData();\n\n\treturn pathData;\n};\n","/home/travis/build/npmtest/node-npmtest-svg-captcha/node_modules/svg-captcha/lib/random.js":"'use strict';\nconst opts = require('./option-manager').options;\n\nconst randomInt = function (min, max) {\n\treturn Math.round(min + (Math.random() * (max - min)));\n};\n\nconst stripCharsFromString = function (string, chars) {\n\treturn string.split('').filter(char => chars.indexOf(char) === -1);\n};\n\nexports.int = randomInt;\n\nexports.greyColor = function (min, max) {\n\tmin = min || 1;\n\tmax = max || 9;\n\tconst int = randomInt(min, max).toString(16);\n\n\treturn `#${int}${int}${int}`;\n};\n\nexports.captchaText = function (options) {\n\tif (typeof options === 'number') {\n\t\toptions = {size: options};\n\t}\n\toptions = options || {};\n\n\tconst size = options.size || 4;\n\tconst ignoreChars = options.ignoreChars || '';\n\tlet i = -1;\n\tlet out = '';\n\tlet chars = opts.charPreset;\n\n\tif (ignoreChars) {\n\t\tchars = stripCharsFromString(chars, ignoreChars);\n\t}\n\n\tconst len = chars.length - 1;\n\n\twhile (++i < size) {\n\t\tout += chars[randomInt(0, len)];\n\t}\n\n\treturn out;\n};\n\n/**\n * Returns an object that has the following props:\n * text, equation\n */\nexports.mathExpr = function () {\n\tconst left = randomInt(1, 9);\n\tconst right = randomInt(1, 9);\n\tconst text = (left + right).toString();\n\tconst equation = left + '+' + right;\n\n\treturn {text, equation};\n};\n\n// https://github.com/jquery/jquery-color/blob/master/jquery.color.js#L432\n// The idea here is generate color in hsl first and convert that to rgb color\nexports.color = function (bgColor) {\n\t// Random 24 colors\n\t// or based on step\n\tconst hue = randomInt(0, 24) / 24;\n\n\tconst saturation = randomInt(60, 80) / 100;\n\tconst bgLightness = bgColor ? getLightness(bgColor) : 1.0;\n\tlet minLightness;\n\tlet maxLightness;\n\tif (bgLightness >= 0.5) {\n\t\tminLightness = Math.round(bgLightness * 100) - 45;\n\t\tmaxLightness = Math.round(bgLightness * 100) - 25;\n\t} else {\n\t\tminLightness = Math.round(bgLightness * 100) + 25;\n\t\tmaxLightness = Math.round(bgLightness * 100) + 45;\n\t}\n\tconst lightness = randomInt(minLightness, maxLightness) / 100;\n\n\tconst q = lightness < 0.5 ?\n\t\tlightness * (lightness + saturation) :\n\t\tlightness + saturation - (lightness * saturation);\n\tconst p = (2 * lightness) - q;\n\n\tconst r = Math.floor(hue2rgb(p, q, hue + (1 / 3)) * 255);\n\tconst g = Math.floor(hue2rgb(p, q, hue) * 255);\n\tconst b = Math.floor(hue2rgb(p, q, hue - (1 / 3)) * 255);\n\t/* eslint-disable no-mixed-operators */\n\tconst c = ((b | g << 8 | r << 16) | 1 << 24).toString(16).slice(1);\n\n\treturn '#' + c;\n};\n\nfunction getLightness(rgbColor) {\n\tif (rgbColor[0] !== '#') {\n\t\treturn 1.0; // Invalid color ?\n\t}\n\trgbColor = rgbColor.slice(1);\n\tif (rgbColor.length === 3) {\n\t\trgbColor = rgbColor[0] + rgbColor[0] +\n\t\t\trgbColor[1] + rgbColor[1] + rgbColor[2] + rgbColor[2];\n\t}\n\n\tconst hexColor = parseInt(rgbColor, 16);\n\tconst r = hexColor >> 16;\n\tconst g = hexColor >> 8 & 255;\n\tconst b = hexColor & 255;\n\tconst max = Math.max(r, g, b);\n\tconst min = Math.min(r, g, b);\n\n\treturn (max + min) / (2 * 255);\n}\n\nfunction hue2rgb(p, q, h) {\n\th = (h + 1) % 1;\n\tif (h * 6 < 1) {\n\t\treturn p + (q - p) * h * 6;\n\t}\n\tif (h * 2 < 1) {\n\t\treturn q;\n\t}\n\tif (h * 3 < 2) {\n\t\treturn p + (q - p) * ((2 / 3) - h) * 6;\n\t}\n\treturn p;\n}\n","/home/travis/build/npmtest/node-npmtest-svg-captcha/node_modules/svg-captcha/lib/option-manager.js":"'use strict';\r\nconst path = require('path');\r\nconst opentype = require('opentype.js');\r\nconst charPreset = require('./char-preset');\r\n\r\nconst fontPath = path.join(__dirname, '../fonts/Comismsh.ttf');\r\nconst font = opentype.loadSync(fontPath);\r\nconst ascender = font.ascender;\r\nconst descender = font.descender;\r\n\r\nconst options = {\r\n\twidth: 150,\r\n\theight: 50,\r\n\tnoise: 1,\r\n\tcolor: false,\r\n\tbackground: '',\r\n\tsize: 4,\r\n\tignoreChars: '',\r\n\tfontSize: 56,\r\n\tcharPreset, font, ascender, descender\r\n};\r\n\r\nconst loadFont = filepath => {\r\n\tconst font = opentype.loadSync(filepath);\r\n\toptions.font = font;\r\n\toptions.ascender = font.ascender;\r\n\toptions.descender = font.descender;\r\n};\r\n\r\nmodule.exports = {\r\n\toptions, loadFont\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-svg-captcha/node_modules/svg-captcha/lib/char-preset.js":"'use strict';\n\nmodule.exports = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n"}